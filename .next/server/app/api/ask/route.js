/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/ask/route";
exports.ids = ["app/api/ask/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream/web");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fask%2Froute&page=%2Fapi%2Fask%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fask%2Froute.ts&appDir=%2FUsers%2Falex%2FWebstormProjects%2Fpersonal-rag-agent%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Falex%2FWebstormProjects%2Fpersonal-rag-agent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fask%2Froute&page=%2Fapi%2Fask%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fask%2Froute.ts&appDir=%2FUsers%2Falex%2FWebstormProjects%2Fpersonal-rag-agent%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Falex%2FWebstormProjects%2Fpersonal-rag-agent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_alex_WebstormProjects_personal_rag_agent_app_api_ask_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/ask/route.ts */ \"(rsc)/./app/api/ask/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/ask/route\",\n        pathname: \"/api/ask\",\n        filename: \"route\",\n        bundlePath: \"app/api/ask/route\"\n    },\n    resolvedPagePath: \"/Users/alex/WebstormProjects/personal-rag-agent/app/api/ask/route.ts\",\n    nextConfigOutput,\n    userland: _Users_alex_WebstormProjects_personal_rag_agent_app_api_ask_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZhc2slMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmFzayUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmFzayUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmFsZXglMkZXZWJzdG9ybVByb2plY3RzJTJGcGVyc29uYWwtcmFnLWFnZW50JTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRmFsZXglMkZXZWJzdG9ybVByb2plY3RzJTJGcGVyc29uYWwtcmFnLWFnZW50JmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNvQjtBQUNqRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vPzczN2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9hbGV4L1dlYnN0b3JtUHJvamVjdHMvcGVyc29uYWwtcmFnLWFnZW50L2FwcC9hcGkvYXNrL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hc2svcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9hc2tcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2Fzay9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9hbGV4L1dlYnN0b3JtUHJvamVjdHMvcGVyc29uYWwtcmFnLWFnZW50L2FwcC9hcGkvYXNrL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgd29ya0FzeW5jU3RvcmFnZSxcbiAgICAgICAgd29ya1VuaXRBc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fask%2Froute&page=%2Fapi%2Fask%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fask%2Froute.ts&appDir=%2FUsers%2Falex%2FWebstormProjects%2Fpersonal-rag-agent%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Falex%2FWebstormProjects%2Fpersonal-rag-agent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./app/api/ask/route.ts":
/*!******************************!*\
  !*** ./app/api/ask/route.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _lib_modelProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/modelProvider */ \"(rsc)/./lib/modelProvider.ts\");\n/* harmony import */ var _lib_prompt__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/prompt */ \"(rsc)/./lib/prompt.ts\");\n/* harmony import */ var _lib_perplexity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/perplexity */ \"(rsc)/./lib/perplexity.ts\");\n\n\n\n\n\n\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_4__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\nfunction approxTokenLen(s) {\n    return Math.ceil(s.length / 4);\n}\nfunction dedupeAndMerge(matches) {\n    const seen = new Set();\n    const unique = [];\n    for (const m of matches){\n        const key = `${m.document_id}:${m.chunk_text.slice(0, 100)}`;\n        if (!seen.has(key)) {\n            seen.add(key);\n            unique.push(m);\n        }\n    }\n    return unique;\n}\nfunction cleanAndParseJSON(raw) {\n    try {\n        // Удаляем markdown блоки кода и пробелы\n        let cleaned = raw.replace(/```json\\s*/gi, '').replace(/```\\s*/gi, '').trim();\n        // Находим начало JSON (первая { или [)\n        const jsonStart = cleaned.search(/[\\{\\[]/);\n        if (jsonStart > 0) {\n            cleaned = cleaned.substring(jsonStart);\n        }\n        // Находим конец JSON\n        let depth = 0;\n        let inString = false;\n        let escapeNext = false;\n        let jsonEnd = -1;\n        for(let i = 0; i < cleaned.length; i++){\n            const char = cleaned[i];\n            if (escapeNext) {\n                escapeNext = false;\n                continue;\n            }\n            if (char === '\\\\') {\n                escapeNext = true;\n                continue;\n            }\n            if (char === '\"' && !escapeNext) {\n                inString = !inString;\n                continue;\n            }\n            if (!inString) {\n                if (char === '{' || char === '[') {\n                    depth++;\n                } else if (char === '}' || char === ']') {\n                    depth--;\n                    if (depth === 0) {\n                        jsonEnd = i + 1;\n                        break;\n                    }\n                }\n            }\n        }\n        if (jsonEnd > 0) {\n            cleaned = cleaned.substring(0, jsonEnd);\n        }\n        // Пробуем распарсить\n        return JSON.parse(cleaned);\n    } catch (e) {\n        console.error('Failed to parse JSON:', e);\n        console.log('Raw string was:', raw.substring(0, 500));\n        return null;\n    }\n}\nasync function POST(request) {\n    const t0 = Date.now();\n    try {\n        const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_5__.createClient)(\"https://zqharntcylmxxdcvbtqi.supabase.co\", process.env.SUPABASE_SERVICE_ROLE_KEY);\n        const token = request.headers.get(\"authorization\")?.replace(\"Bearer \", \"\");\n        if (!token) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Не авторизован\"\n        }, {\n            status: 401\n        });\n        const { data: { user }, error: authError } = await supabase.auth.getUser(token);\n        if (authError || !user) return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Не авторизован\"\n        }, {\n            status: 401\n        });\n        const body = await request.json();\n        const { question, provider, projectId, role, // НОВЫЕ параметры\n        clarificationAnswers, skipClarification, webSearchEnabled, forceWebSearch// Принудительный web search\n         } = body;\n        if (!question?.trim()) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Вопрос не предоставлен\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(`Вопрос: \"${question}\" | Проект: ${projectId} | Роль: ${role}`);\n        console.log(`Web Search: enabled=${webSearchEnabled}, forced=${forceWebSearch}`);\n        // Проверяем количество чанков\n        let countQuery = supabase.from(\"doc_chunks\").select(\"*\", {\n            count: \"exact\",\n            head: true\n        }).eq(\"user_id\", user.id);\n        if (projectId && projectId !== 'null') {\n            countQuery = countQuery.eq(\"project_id\", projectId);\n        }\n        const { count } = await countQuery;\n        // Получаем релевантные чанки (даже если их 0, для контекста)\n        let chunks = [];\n        let webContext = null;\n        if (count && count > 0) {\n            console.log(`Найдено ${count} чанков в проекте`);\n            // Генерация эмбеддинга\n            console.log('Генерация эмбеддинга...');\n            const embedRes = await openai.embeddings.create({\n                model: \"text-embedding-3-small\",\n                input: question\n            });\n            const queryEmbedding = embedRes.data[0].embedding;\n            // Поиск релевантных чанков\n            console.log('Поиск релевантных чанков...');\n            const { data: matches, error: matchError } = await supabase.rpc(\"match_doc_chunks\", {\n                query_embedding: queryEmbedding,\n                match_threshold: 0.25,\n                match_count: 15,\n                filter_user_id: user.id,\n                filter_project_id: projectId && projectId !== 'null' ? projectId : null\n            });\n            if (!matchError && matches?.length) {\n                const uniq = dedupeAndMerge(matches).slice(0, 10);\n                chunks = uniq.map((m)=>({\n                        doc_id: m.document_id,\n                        chunk_index: m.chunk_index ?? 0,\n                        similarity: m.similarity ?? 0,\n                        text: (m.chunk_text || \"\").slice(0, 2000)\n                    }));\n                console.log(`Найдено ${chunks.length} релевантных чанков`);\n            }\n        }\n        // ================== CLARIFICATION MODE ==================\n        // Проверяем необходимость уточнений (только если не пропущено и нет ответов)\n        if (!skipClarification && !clarificationAnswers) {\n            const clarificationCheck = (0,_lib_prompt__WEBPACK_IMPORTED_MODULE_2__.analyzeClarificationNeed)(question, chunks, role);\n            if (clarificationCheck.needed) {\n                console.log('Требуются уточнения:', clarificationCheck.questions);\n                // Проверяем, нужен ли web search как одно из уточнений\n                if (!webSearchEnabled && chunks.length === 0) {\n                    clarificationCheck.questions?.push({\n                        id: 'enable_web_search',\n                        question: 'В документах нет релевантной информации. Искать ответ в интернете?',\n                        type: 'boolean',\n                        required: false,\n                        context: 'Поиск в интернете поможет найти актуальную информацию'\n                    });\n                }\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    mode: 'needs_clarification',\n                    clarifications: clarificationCheck.questions,\n                    partialInsight: clarificationCheck.preliminaryInsight,\n                    originalQuestion: question,\n                    documentsFound: chunks.length\n                });\n            }\n        }\n        // Обогащаем вопрос уточнениями если они есть\n        let finalQuestion = question;\n        if (clarificationAnswers) {\n            finalQuestion = (0,_lib_prompt__WEBPACK_IMPORTED_MODULE_2__.mergeQuestionWithClarifications)(question, clarificationAnswers);\n            console.log('Обогащенный вопрос:', finalQuestion);\n            // Проверяем, не включил ли пользователь web search через уточнения\n            if (clarificationAnswers.enable_web_search === true) {\n                body.webSearchEnabled = true;\n            }\n        }\n        // ================== SMART WEB SEARCH ==================\n        // Определяем, нужен ли web search\n        const needsWeb = webSearchEnabled ? forceWebSearch || (0,_lib_perplexity__WEBPACK_IMPORTED_MODULE_3__.shouldSearchWeb)(finalQuestion, chunks, false) : (0,_lib_perplexity__WEBPACK_IMPORTED_MODULE_3__.shouldSearchWeb)(finalQuestion, chunks, false);\n        if (needsWeb || webSearchEnabled && chunks.length === 0) {\n            console.log('🌐 Выполняем web search...');\n            try {\n                const webEnrichment = await (0,_lib_perplexity__WEBPACK_IMPORTED_MODULE_3__.enrichWithWebSearch)(finalQuestion, chunks, {\n                    searchRecencyFilter: detectTimeFilter(finalQuestion)\n                });\n                webContext = webEnrichment;\n                console.log('✅ Web search завершен, найдено источников:', webEnrichment.webSources?.length || 0);\n            } catch (webError) {\n                console.error('⚠️ Web search failed:', webError);\n            // Продолжаем без web context\n            }\n        }\n        // Если нет ни документов, ни web результатов\n        if (!chunks.length && !webContext) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                answer: \"Не нашёл информации ни в документах проекта, ни в интернете. Попробуйте переформулировать вопрос или загрузить релевантные документы.\",\n                question,\n                sources: [],\n                webSources: [],\n                insights: [],\n                follow_up_questions: [\n                    \"Загрузить документы по этой теме?\",\n                    \"Включить расширенный поиск?\"\n                ]\n            });\n        }\n        // ================== ПОДГОТОВКА ПРОМПТА ==================\n        const ctxTokens = approxTokenLen(chunks.map((c)=>c.text).join(\" \"));\n        const providerFinal = provider ?? (ctxTokens > 120000 ? \"anthropic\" : \"openai\");\n        console.log(`Используется провайдер: ${providerFinal}, контекст: ${ctxTokens} токенов`);\n        // Формируем системный промпт с ролью\n        let systemPrompt = _lib_prompt__WEBPACK_IMPORTED_MODULE_2__.SYSTEM_RAG;\n        if (role && role !== 'analyst') {\n            const rolePrefix = role === 'custom' ? role : `ROLE: ${role}\\n\\n`;\n            systemPrompt = `${rolePrefix}${_lib_prompt__WEBPACK_IMPORTED_MODULE_2__.SYSTEM_RAG}`;\n        }\n        // Добавляем инструкции для web context\n        if (webContext) {\n            systemPrompt += `\\n\\nWEB SEARCH INTEGRATION:\n- You have access to both document context and real-time web search results\n- Clearly distinguish between information from documents vs web\n- Prioritize recent web data for current events and market information\n- Cross-validate facts between sources when possible`;\n        }\n        // Строим промпт с комбинированным контекстом\n        const userPrompt = buildEnhancedUserPrompt(finalQuestion, chunks, webContext, clarificationAnswers);\n        console.log('Запрос к модели...');\n        const raw = await (0,_lib_modelProvider__WEBPACK_IMPORTED_MODULE_1__.chatWithProvider)(providerFinal, {\n            system: systemPrompt,\n            user: userPrompt,\n            maxTokens: 4000\n        });\n        console.log(`Raw ответ (первые 200 символов):`, raw.substring(0, 200));\n        // Парсим JSON из ответа модели\n        let parsed = cleanAndParseJSON(raw);\n        if (!parsed) {\n            console.log('JSON парсинг не удался, используем raw текст');\n            parsed = {\n                answer: raw,\n                citations: [],\n                insights: [],\n                follow_up_questions: []\n            };\n        }\n        // Извлекаем данные\n        const answer = parsed.answer || \"Ошибка: не удалось получить ответ\";\n        const citations = parsed.citations || chunks.slice(0, 3).map((c)=>({\n                doc_id: c.doc_id,\n                chunk_index: c.chunk_index,\n                similarity: c.similarity,\n                quote: c.text.slice(0, 200)\n            }));\n        // Добавляем web источники если есть\n        const webSources = webContext?.webSources || [];\n        const insights = parsed.insights || [];\n        const follow_up_questions = parsed.follow_up_questions || [];\n        console.log(`Ответ получен. Answer: ${answer.length} chars, Web sources: ${webSources.length}`);\n        const latency = Date.now() - t0;\n        // Сохраняем сообщения с расширенными метаданными\n        await supabase.from(\"messages\").insert([\n            {\n                user_id: user.id,\n                role: \"user\",\n                content: question,\n                project_id: projectId && projectId !== 'null' ? projectId : null\n            },\n            {\n                user_id: user.id,\n                role: \"assistant\",\n                content: answer,\n                project_id: projectId && projectId !== 'null' ? projectId : null,\n                metadata: {\n                    provider: providerFinal,\n                    latency_ms: latency,\n                    sources: citations,\n                    webSources,\n                    insights,\n                    follow_up_questions,\n                    usedWebSearch: !!webContext,\n                    hadClarifications: !!clarificationAnswers // НОВОЕ\n                }\n            }\n        ]);\n        // Возвращаем расширенный ответ\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            answer,\n            question,\n            sources: citations,\n            webSources,\n            insights,\n            follow_up_questions,\n            provider: providerFinal,\n            latency_ms: latency,\n            usedWebSearch: !!webContext // НОВОЕ: флаг использования web\n        });\n    } catch (err) {\n        console.error('Error in /api/ask:', err);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: err?.message || \"Unknown error\",\n            answer: \"Произошла ошибка при обработке запроса. Попробуйте еще раз.\",\n            sources: [],\n            webSources: [],\n            insights: [],\n            follow_up_questions: []\n        }, {\n            status: 500\n        });\n    }\n}\n// ================== ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ==================\n// Определение временного фильтра для web search\nfunction detectTimeFilter(question) {\n    const lowerQ = question.toLowerCase();\n    if (lowerQ.includes('сегодня') || lowerQ.includes('today')) return 'day';\n    if (lowerQ.includes('неделе') || lowerQ.includes('week')) return 'week';\n    if (lowerQ.includes('месяц') || lowerQ.includes('month')) return 'month';\n    if (lowerQ.includes('год') || lowerQ.includes('year')) return 'year';\n    return undefined;\n}\n// Расширенная функция построения промпта с web context\nfunction buildEnhancedUserPrompt(question, documentChunks, webContext, clarificationAnswers) {\n    let prompt = '';\n    // Добавляем контекст из документов\n    if (documentChunks.length > 0) {\n        prompt += 'DOCUMENT CONTEXT:\\n';\n        prompt += documentChunks.map((c, i)=>`[Doc ${i + 1}] (Similarity: ${(c.similarity * 100).toFixed(1)}%)\\n${c.text}\\n`).join('\\n---\\n');\n    }\n    // Добавляем web контекст\n    if (webContext) {\n        prompt += '\\n\\nWEB SEARCH RESULTS (Real-time):\\n';\n        prompt += webContext.webAnswer || '';\n        if (webContext.webSources?.length > 0) {\n            prompt += '\\n\\nWeb Sources:\\n';\n            prompt += webContext.webSources.map((s)=>`- ${s.title || s.url}`).join('\\n');\n        }\n    }\n    // Добавляем уточнения\n    if (clarificationAnswers) {\n        prompt += '\\n\\nUSER CLARIFICATIONS:\\n';\n        prompt += Object.entries(clarificationAnswers).map(([key, value])=>`${key}: ${value}`).join('\\n');\n    }\n    prompt += `\\n\\nUSER QUESTION:\\n${question}\\n\\n`;\n    prompt += 'Provide a comprehensive answer using both document and web context where available. ';\n    prompt += 'Clearly indicate which information comes from documents vs web sources.';\n    return prompt;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/ask/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/modelProvider.ts":
/*!******************************!*\
  !*** ./lib/modelProvider.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chatWithAI: () => (/* binding */ chatWithAI),\n/* harmony export */   chatWithProvider: () => (/* binding */ chatWithProvider)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @anthropic-ai/sdk */ \"(rsc)/./node_modules/@anthropic-ai/sdk/index.mjs\");\n\n\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\nconst anthropic = new _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    apiKey: process.env.ANTHROPIC_API_KEY || \"\"\n});\n// Основная новая функция\nasync function chatWithAI(args) {\n    const maxTokens = args.maxTokens ?? 4000;\n    if (args.forceProvider === \"openai\") {\n        return await callOpenAI(args.system, args.user, maxTokens);\n    }\n    if (args.forceProvider === \"anthropic\") {\n        return await callAnthropic(args.system, args.user, maxTokens);\n    }\n    // Сначала Claude, затем GPT\n    try {\n        console.log(\"🤖 Trying Claude first...\");\n        const claudeResponse = await callAnthropic(args.system, args.user, maxTokens);\n        if (claudeResponse && claudeResponse.trim().length > 0) {\n            console.log(\"✅ Claude responded successfully\");\n            return claudeResponse;\n        }\n        throw new Error(\"Claude returned empty response\");\n    } catch (claudeError) {\n        console.error(\"⚠️ Claude failed:\", claudeError);\n        console.log(\"🔄 Switching to GPT as fallback...\");\n        try {\n            const gptResponse = await callOpenAI(args.system, args.user, maxTokens);\n            console.log(\"✅ GPT responded successfully\");\n            return gptResponse;\n        } catch (gptError) {\n            console.error(\"❌ Both providers failed\");\n            throw new Error(`Both AI providers failed. Claude: ${claudeError}, GPT: ${gptError}`);\n        }\n    }\n}\n// Обратная совместимость со старым API\nasync function chatWithProvider(provider, args) {\n    console.log(`⚠️ chatWithProvider is deprecated, use chatWithAI instead`);\n    // Игнорируем параметр provider, всегда используем логику Claude → GPT\n    return await chatWithAI(args);\n}\nasync function callAnthropic(system, user, maxTokens) {\n    if (!process.env.ANTHROPIC_API_KEY) {\n        throw new Error(\"Anthropic API key not configured\");\n    }\n    const res = await anthropic.messages.create({\n        model: process.env.ANTHROPIC_MODEL || \"claude-opus-4-1-20250805\",\n        max_tokens: Math.min(maxTokens, 8192),\n        temperature: 0.1,\n        system: system,\n        messages: [\n            {\n                role: \"user\",\n                content: user\n            }\n        ]\n    });\n    const content = res.content?.[0];\n    if (content && content.type === \"text\" && content.text) {\n        return content.text;\n    }\n    throw new Error(\"Invalid response from Anthropic\");\n}\nasync function callOpenAI(system, user, maxTokens) {\n    if (!process.env.OPENAI_API_KEY) {\n        throw new Error(\"OpenAI API key not configured\");\n    }\n    const res = await openai.chat.completions.create({\n        model: process.env.OPENAI_CHAT_MODEL || \"gpt-4-turbo-preview\",\n        messages: [\n            {\n                role: \"system\",\n                content: system\n            },\n            {\n                role: \"user\",\n                content: user\n            }\n        ],\n        max_tokens: Math.min(maxTokens, 8000),\n        temperature: 0.1\n    });\n    const content = res.choices[0]?.message?.content;\n    if (content) {\n        return content;\n    }\n    throw new Error(\"Invalid response from OpenAI\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/modelProvider.ts\n");

/***/ }),

/***/ "(rsc)/./lib/perplexity.ts":
/*!***************************!*\
  !*** ./lib/perplexity.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PerplexityClient: () => (/* binding */ PerplexityClient),\n/* harmony export */   enrichWithWebSearch: () => (/* binding */ enrichWithWebSearch),\n/* harmony export */   shouldSearchWeb: () => (/* binding */ shouldSearchWeb)\n/* harmony export */ });\n// lib/perplexity.ts\nclass PerplexityClient {\n    constructor(config){\n        this.baseUrl = 'https://api.perplexity.ai';\n        this.apiKey = config.apiKey || process.env.PERPLEXITY_API_KEY;\n    }\n    async search(query, options) {\n        try {\n            const response = await fetch(`${this.baseUrl}/chat/completions`, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${this.apiKey}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    model: 'sonar-medium-online',\n                    messages: [\n                        {\n                            role: 'system',\n                            content: 'You are a helpful search assistant. Provide accurate, up-to-date information with sources.'\n                        },\n                        {\n                            role: 'user',\n                            content: query\n                        }\n                    ],\n                    temperature: 0.2,\n                    top_p: 0.9,\n                    search_domain_filter: options?.searchDomainFilter,\n                    return_images: options?.returnImages || false,\n                    return_related_questions: options?.returnRelated || false,\n                    search_recency_filter: options?.searchRecencyFilter\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`Perplexity API error: ${response.status}`);\n            }\n            const data = await response.json();\n            return {\n                answer: data.choices[0].message.content,\n                sources: data.sources || [],\n                images: data.images || [],\n                relatedQuestions: data.related_questions || []\n            };\n        } catch (error) {\n            console.error('Perplexity search error:', error);\n            throw error;\n        }\n    }\n}\n// Smart detection функция\nfunction shouldSearchWeb(question, documentContext, forceSearch = false) {\n    // Если форсированный поиск - всегда используем\n    if (forceSearch) return true;\n    const lowerQ = question.toLowerCase();\n    // Паттерны, требующие веб-поиска\n    const webPatterns = [\n        /последн(ие|ий|яя|ее) новост/i,\n        /текущ(ий|ая|ее|ие)/i,\n        /сегодня|вчера|на этой неделе/i,\n        /актуальн(ый|ая|ое|ые)/i,\n        /современн(ый|ая|ое|ые)/i,\n        /тренд(ы|ов)/i,\n        /прогноз на/i,\n        /что происходит с/i,\n        /конкурент(ы|ов|ами)/i,\n        /рыночн(ые|ая) (цен|стоимост|ставк)/i,\n        /курс (валют|доллара|евро)/i,\n        /законодательств|регулирован/i,\n        /(сравни|compare).*(рынк|market|индустр|industry)/i\n    ];\n    // Проверяем паттерны\n    const needsWeb = webPatterns.some((pattern)=>pattern.test(lowerQ));\n    // Проверяем качество документального контекста\n    const hasGoodDocContext = documentContext.some((d)=>d.similarity > 0.75);\n    const avgSimilarity = documentContext.reduce((sum, d)=>sum + d.similarity, 0) / (documentContext.length || 1);\n    // Логика принятия решения\n    return needsWeb || !hasGoodDocContext && avgSimilarity < 0.5;\n}\n// Функция объединения контекстов\nasync function enrichWithWebSearch(question, documentContext, options) {\n    const client = new PerplexityClient({\n        apiKey: process.env.PERPLEXITY_API_KEY\n    });\n    // Формируем контекстный запрос\n    const contextualQuery = `${question}. Context: Working with documents about ${extractTopics(documentContext).join(', ')}.`;\n    const webResults = await client.search(contextualQuery, options);\n    return {\n        webAnswer: webResults.answer,\n        webSources: webResults.sources,\n        combinedContext: mergeContexts(documentContext, webResults),\n        confidence: calculateCombinedConfidence(documentContext, webResults)\n    };\n}\nfunction extractTopics(context) {\n    // Извлекаем ключевые темы из контекста\n    const topics = new Set();\n    context.forEach((chunk)=>{\n        // Простая эвристика - можно улучшить с NLP\n        const matches = chunk.text.match(/[A-Z][a-z]+ [A-Z][a-z]+/g) || [];\n        matches.forEach((m)=>topics.add(m));\n    });\n    return Array.from(topics).slice(0, 5);\n}\nfunction mergeContexts(docContext, webResults) {\n    return `\nDOCUMENT CONTEXT:\n${docContext.map((d)=>d.text).join('\\n')}\n\nWEB CONTEXT (Real-time):\n${webResults.answer}\n\nSOURCES:\n${webResults.sources.map((s)=>`- ${s.url}`).join('\\n')}\n  `;\n}\nfunction calculateCombinedConfidence(docContext, webResults) {\n    const docConfidence = Math.max(...docContext.map((d)=>d.similarity), 0);\n    const webConfidence = webResults.sources?.length > 0 ? 0.8 : 0.5;\n    return Math.max(docConfidence, webConfidence);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/perplexity.ts\n");

/***/ }),

/***/ "(rsc)/./lib/prompt.ts":
/*!***********************!*\
  !*** ./lib/prompt.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ROLE_PROMPTS: () => (/* binding */ ROLE_PROMPTS),\n/* harmony export */   SYSTEM_RAG: () => (/* binding */ SYSTEM_RAG),\n/* harmony export */   TASK_TYPES: () => (/* binding */ TASK_TYPES),\n/* harmony export */   analyzeClarificationNeed: () => (/* binding */ analyzeClarificationNeed),\n/* harmony export */   buildAutoSummaryPrompt: () => (/* binding */ buildAutoSummaryPrompt),\n/* harmony export */   buildCriticalAnalysisPrompt: () => (/* binding */ buildCriticalAnalysisPrompt),\n/* harmony export */   buildDocumentCreationPrompt: () => (/* binding */ buildDocumentCreationPrompt),\n/* harmony export */   buildUserPrompt: () => (/* binding */ buildUserPrompt),\n/* harmony export */   detectTaskType: () => (/* binding */ detectTaskType),\n/* harmony export */   mergeQuestionWithClarifications: () => (/* binding */ mergeQuestionWithClarifications)\n/* harmony export */ });\n// lib/prompt.ts\n// Основной системный промпт - более гибкий и креативный\nconst SYSTEM_RAG = `You are an advanced AI assistant with document analysis capabilities and creative problem-solving skills.\n\nWORKING MODES:\n1. DOCUMENT ANALYSIS: When answering questions about uploaded documents, use provided context\n2. CREATIVE MODE: When asked to CREATE (letters, emails, reports, plans), generate complete content\n3. HYBRID MODE: Combine document insights with creative solutions and recommendations\n\nRESPONSE PRINCIPLES:\n- Be comprehensive and detailed (500-2000+ words when appropriate)\n- Don't just describe what you would do - ACTUALLY DO IT\n- Provide multiple perspectives and alternatives\n- Include specific examples and actionable steps\n- Think critically and identify gaps, risks, opportunities\n- Match user's language (Russian/English)\n\nJSON RESPONSE STRUCTURE:\n{\n  \"answer\": \"Your comprehensive response here (can be very long, including full documents if requested)\",\n  \"citations\": [\n    {\n      \"doc_id\": \"document-uuid\",\n      \"chunk_index\": 0,\n      \"similarity\": 0.85,\n      \"quote\": \"relevant excerpt (max 200 chars)\"\n    }\n  ],\n  \"insights\": [\n    {\n      \"type\": \"risk|opportunity|recommendation|gap\",\n      \"content\": \"detailed insight description\",\n      \"importance\": 1-5,\n      \"action_required\": \"specific action if needed\"\n    }\n  ],\n  \"follow_up_questions\": [\n    \"Strategic question to deepen analysis\",\n    \"Question to clarify requirements\",\n    \"Question to explore alternatives\"\n  ],\n  \"confidence_level\": \"high|medium|low\",\n  \"data_gaps\": [\"missing info 1\", \"missing info 2\"]\n}\n\nCRITICAL RULES:\n- When asked to write something, write it IN FULL in the answer field\n- Don't say \"I would write\" - actually write it\n- For creative tasks, citations are optional\n- Be proactive with suggestions and improvements\n- If information is partial, work with what you have and note gaps`;\n// Расширенные роли с более детальными инструкциями\nconst ROLE_PROMPTS = {\n    analyst: `\nROLE: Senior Business Analyst & Strategic Advisor\nMINDSET: Critical thinker, pattern recognizer, risk identifier\nFOCUS AREAS:\n- Data patterns and anomalies\n- Hidden risks and dependencies\n- Process inefficiencies\n- Strategic opportunities\n- Competitive advantages\nAPPROACH:\n- Question every assumption\n- Validate all numbers\n- Find contradictions\n- Propose multiple scenarios\n- Recommend specific actions with timelines\nOUTPUT STYLE: Structured analysis with executive summary, detailed findings, and prioritized recommendations\n`,\n    cfo: `\nROLE: Chief Financial Officer & Financial Strategist\nMINDSET: Numbers-driven, risk-aware, growth-focused\nFOCUS AREAS:\n- Financial metrics (CAC, LTV, burn rate, runway)\n- Unit economics and profitability paths\n- Cash flow optimization\n- Investment efficiency\n- Financial risks and hedging strategies\nAPPROACH:\n- Verify all calculations\n- Model different scenarios\n- Identify cost optimization opportunities\n- Propose funding strategies\n- Create financial projections\nOUTPUT STYLE: Financial reports with clear metrics, charts (described), and actionable recommendations\n`,\n    lawyer: `\nROLE: Senior Legal Counsel & Risk Advisor\nMINDSET: Risk-mitigator, detail-oriented, protective\nFOCUS AREAS:\n- Legal compliance and regulatory requirements\n- Contract terms and obligations\n- Intellectual property protection\n- Liability exposure\n- Data privacy and security\nAPPROACH:\n- Identify all legal risks\n- Suggest protective clauses\n- Review for compliance gaps\n- Propose risk mitigation strategies\n- Draft legal documents when needed\nOUTPUT STYLE: Legal memorandums with clear risk assessment and specific recommendations\n`,\n    investor: `\nROLE: Venture Capital Partner & Strategic Investor\nMINDSET: Growth-focused, metric-driven, exit-oriented\nFOCUS AREAS:\n- Market size and growth potential\n- Scalability and unit economics\n- Competitive differentiation\n- Team and execution capability\n- Exit strategy and ROI potential\nAPPROACH:\n- Challenge growth assumptions\n- Evaluate realistic vs optimistic scenarios\n- Assess competitive moats\n- Calculate potential returns\n- Identify key risks to scale\nOUTPUT STYLE: Investment memos with thesis, risks, opportunities, and valuation perspectives\n`,\n    cmo: `\nROLE: Chief Marketing Officer & Growth Strategist\nMINDSET: Customer-centric, data-driven, creative\nFOCUS AREAS:\n- Customer acquisition channels and costs\n- Brand positioning and messaging\n- Marketing attribution and ROI\n- Customer retention and LTV\n- Competitive positioning\nAPPROACH:\n- Analyze channel performance\n- Optimize conversion funnels\n- Propose creative campaigns\n- Build customer personas\n- Design growth experiments\nOUTPUT STYLE: Marketing strategies with specific campaigns, budgets, and KPIs\n`,\n    custom: `\nROLE: Adaptive Expert\nMINDSET: Flexible, comprehensive, solution-oriented\nAPPROACH: Adapt to the specific needs of the task\nOUTPUT STYLE: Match the requirements of the request\n`\n};\n// Функция анализа необходимости уточнений\nfunction analyzeClarificationNeed(question, documentContext, projectRole) {\n    const lowerQ = question.toLowerCase();\n    const clarifications = [];\n    // Проверяем неопределенности\n    if (lowerQ.includes('анализ') || lowerQ.includes('analyze')) {\n        if (!lowerQ.match(/за (.*) период|с (\\d{4})|последн/)) {\n            clarifications.push({\n                id: 'time_period',\n                question: 'За какой период провести анализ?',\n                type: 'select',\n                options: [\n                    'Последний месяц',\n                    'Последний квартал',\n                    'Последний год',\n                    'Все время',\n                    'Другой период'\n                ],\n                required: true,\n                context: 'Для точного анализа нужно определить временные рамки'\n            });\n        }\n    }\n    if (lowerQ.includes('сравн') || lowerQ.includes('compar')) {\n        if (!lowerQ.includes('с ')) {\n            clarifications.push({\n                id: 'comparison_target',\n                question: 'С чем сравнить?',\n                type: 'multiselect',\n                options: [\n                    'Конкуренты',\n                    'Прошлый период',\n                    'Рыночные стандарты',\n                    'План/бюджет'\n                ],\n                required: true,\n                context: 'Уточните базу для сравнения'\n            });\n        }\n    }\n    if (lowerQ.includes('отчет') || lowerQ.includes('report')) {\n        clarifications.push({\n            id: 'report_format',\n            question: 'В каком формате подготовить отчет?',\n            type: 'select',\n            options: [\n                'Executive Summary',\n                'Детальный анализ',\n                'Презентация',\n                'Таблица метрик'\n            ],\n            required: false,\n            context: 'Выберите уровень детализации'\n        });\n    }\n    // Проверяем достаточность контекста\n    const hasRelevantDocs = documentContext.some((d)=>d.similarity > 0.7);\n    if (!hasRelevantDocs && documentContext.length > 0) {\n        clarifications.push({\n            id: 'search_web',\n            question: 'Документы содержат мало релевантной информации. Искать дополнительные данные в интернете?',\n            type: 'boolean',\n            required: false,\n            context: 'Это поможет дополнить анализ актуальными данными'\n        });\n    }\n    const preliminaryInsight = hasRelevantDocs ? `Найдено ${documentContext.filter((d)=>d.similarity > 0.7).length} релевантных документов. После уточнений смогу провести детальный анализ.` : `По вашему вопросу есть ограниченная информация в документах. Уточнения помогут сформировать точный ответ.`;\n    return {\n        needed: clarifications.length > 0,\n        questions: clarifications,\n        preliminaryInsight\n    };\n}\n// Функция объединения вопроса с уточнениями\nfunction mergeQuestionWithClarifications(originalQuestion, clarifications) {\n    let enrichedQuestion = originalQuestion;\n    if (clarifications.time_period) {\n        enrichedQuestion += ` [Период: ${clarifications.time_period}]`;\n    }\n    if (clarifications.comparison_target) {\n        const targets = Array.isArray(clarifications.comparison_target) ? clarifications.comparison_target.join(', ') : clarifications.comparison_target;\n        enrichedQuestion += ` [Сравнить с: ${targets}]`;\n    }\n    if (clarifications.report_format) {\n        enrichedQuestion += ` [Формат: ${clarifications.report_format}]`;\n    }\n    return enrichedQuestion;\n}\n// Типы задач для разных подходов\nconst TASK_TYPES = {\n    ANALYSIS: 'analysis',\n    CREATION: 'creation',\n    HYBRID: 'hybrid',\n    SUMMARY: 'summary',\n    CRITICAL_REVIEW: 'critical_review'\n};\n// Определение типа задачи по вопросу\nfunction detectTaskType(question) {\n    const lowerQuestion = question.toLowerCase();\n    const creationKeywords = [\n        'напиши',\n        'создай',\n        'составь',\n        'подготовь',\n        'write',\n        'create',\n        'draft',\n        'prepare'\n    ];\n    const analysisKeywords = [\n        'анализ',\n        'оцени',\n        'проверь',\n        'найди',\n        'analyze',\n        'evaluate',\n        'assess',\n        'find'\n    ];\n    const summaryKeywords = [\n        'резюме',\n        'кратко',\n        'summary',\n        'brief',\n        'основные'\n    ];\n    const criticalKeywords = [\n        'критич',\n        'риски',\n        'проблем',\n        'critical',\n        'risks',\n        'issues'\n    ];\n    if (creationKeywords.some((kw)=>lowerQuestion.includes(kw))) {\n        return TASK_TYPES.CREATION;\n    }\n    if (criticalKeywords.some((kw)=>lowerQuestion.includes(kw))) {\n        return TASK_TYPES.CRITICAL_REVIEW;\n    }\n    if (summaryKeywords.some((kw)=>lowerQuestion.includes(kw))) {\n        return TASK_TYPES.SUMMARY;\n    }\n    if (analysisKeywords.some((kw)=>lowerQuestion.includes(kw))) {\n        return TASK_TYPES.ANALYSIS;\n    }\n    return TASK_TYPES.HYBRID;\n}\nfunction buildUserPrompt(question, chunks, role, previousContext) {\n    const taskType = detectTaskType(question);\n    // Форматируем чанки с большим контекстом\n    const contextChunks = chunks.map((c, i)=>{\n        const text = c.text.replace(/\\s+/g, \" \").slice(0, 2500); // Увеличено до 2500\n        return `# Document Fragment ${i + 1}\nSource: doc_${c.doc_id.substring(0, 8)}\nRelevance: ${(c.similarity * 100).toFixed(1)}%\nContent: ${text}`;\n    }).join(\"\\n\\n---\\n\\n\");\n    // Добавляем роль если указана\n    const roleContext = role && ROLE_PROMPTS[role] ? `ACTIVE ROLE & PERSPECTIVE:\\n${ROLE_PROMPTS[role]}\\n` : '';\n    // Добавляем контекст предыдущих insights если есть\n    const previousInsights = previousContext?.insights ? `\\nPREVIOUS INSIGHTS FROM THIS SESSION:\\n${previousContext.insights.map((i)=>`- ${i.content}`).join('\\n')}\\n` : '';\n    // Специальные инструкции в зависимости от типа задачи\n    const taskInstructions = {\n        [TASK_TYPES.CREATION]: `\nCREATION TASK DETECTED:\n- Generate COMPLETE content, not descriptions\n- Use document context as reference but don't limit yourself\n- Apply professional formatting\n- Include all necessary sections and details\n- Make it ready for immediate use`,\n        [TASK_TYPES.ANALYSIS]: `\nANALYSIS TASK DETECTED:\n- Provide deep, multi-layered analysis\n- Use all available document context\n- Identify patterns, risks, and opportunities\n- Include quantitative analysis where possible\n- Provide specific, actionable recommendations`,\n        [TASK_TYPES.CRITICAL_REVIEW]: `\nCRITICAL REVIEW TASK DETECTED:\n- Identify ALL risks and red flags\n- Question assumptions and find gaps\n- Verify data consistency\n- Propose mitigation strategies\n- Be direct about problems found`,\n        [TASK_TYPES.SUMMARY]: `\nSUMMARY TASK DETECTED:\n- Create concise but comprehensive summary\n- Highlight key points and decisions\n- Include important numbers and dates\n- Note critical risks or actions required`,\n        [TASK_TYPES.HYBRID]: `\nHYBRID TASK DETECTED:\n- Combine document analysis with creative solutions\n- Use context as foundation for recommendations\n- Go beyond the documents when helpful`\n    };\n    return `${roleContext}${previousInsights}\n\nAVAILABLE DOCUMENT CONTEXT:\n${contextChunks || 'No specific document context provided. Use general knowledge and creativity.'}\n\n---\n\nUSER REQUEST:\n${question}\n\nTASK TYPE: ${taskType}\n${taskInstructions[taskType]}\n\nRESPONSE REQUIREMENTS:\n1. Return valid JSON as specified in system prompt\n2. For creative tasks (emails, letters, reports), write COMPLETE content in the answer field\n3. Aim for comprehensive responses (500-2000+ words for complex tasks)\n4. Include specific examples and step-by-step details\n5. Identify insights with importance ratings\n6. Suggest strategic follow-up questions\n7. Note any data gaps or assumptions made\n8. Apply role perspective if specified for deeper expertise\n\nRemember: Don't describe what you would write - ACTUALLY WRITE IT.`;\n}\n// Функция для генерации полных документов\nfunction buildDocumentCreationPrompt(documentType, requirements, context, role) {\n    const roleContext = role && ROLE_PROMPTS[role] ? ROLE_PROMPTS[role] : '';\n    return `${roleContext}\n\nTASK: Create a complete ${documentType}\n\nREQUIREMENTS:\n${requirements}\n\nCONTEXT & BACKGROUND:\n${context}\n\nINSTRUCTIONS:\n1. Create a COMPLETE, professional document\n2. Use appropriate structure and formatting\n3. Include all necessary sections\n4. Make it ready for immediate use\n5. Apply role expertise if specified\n\nOUTPUT: Return the complete document in the answer field of the JSON response.\nDo not describe the document - write the actual full document.`;\n}\n// Функция для критического анализа с расширенными метриками\nfunction buildCriticalAnalysisPrompt(documents, role = 'analyst', focusAreas) {\n    const roleContext = ROLE_PROMPTS[role] || ROLE_PROMPTS.analyst;\n    const focus = focusAreas ? `\\nSPECIFIC FOCUS AREAS:\\n${focusAreas.join('\\n')}` : '';\n    return `${roleContext}${focus}\n\nDOCUMENTS FOR CRITICAL ANALYSIS:\n${documents.map((doc, i)=>`\\n--- Document ${i + 1} ---\\n${doc}`).join('\\n')}\n\nCOMPREHENSIVE ANALYSIS REQUIRED:\n1. Executive Summary (3-5 sentences)\n2. Key Findings:\n   - Patterns and trends\n   - Anomalies and outliers\n   - Contradictions between sources\n3. Risk Assessment:\n   - Critical risks (with probability and impact)\n   - Risk mitigation strategies\n4. Opportunities:\n   - Quick wins (< 1 month)\n   - Strategic opportunities (3-12 months)\n   - Long-term potential\n5. Metrics & KPIs:\n   - Current performance\n   - Benchmarks and gaps\n   - Recommended targets\n6. Data Quality Assessment:\n   - Completeness (%)\n   - Reliability concerns\n   - Missing critical information\n7. Recommendations:\n   - Immediate actions (this week)\n   - Short-term plan (1 month)\n   - Strategic roadmap (3-6 months)\n8. Dependencies and Constraints\n\nReturn comprehensive JSON with all sections filled.`;\n}\n// Функция для автоматического саммари при загрузке документа\nfunction buildAutoSummaryPrompt(text, docName) {\n    return `Analyze this newly uploaded document and create a comprehensive summary.\n\nDocument: ${docName}\nContent (first 5000 chars): ${text.substring(0, 5000)}\n\nCreate a structured summary:\n{\n  \"executive_summary\": \"2-3 sentence overview\",\n  \"document_type\": \"report|email|contract|presentation|other\",\n  \"key_points\": [\n    {\"point\": \"key finding\", \"importance\": \"high|medium|low\"}\n  ],\n  \"metrics\": [\n    {\"metric\": \"name\", \"value\": \"amount\", \"context\": \"explanation\"}\n  ],\n  \"dates\": [\n    {\"date\": \"YYYY-MM-DD\", \"event\": \"what happens\", \"importance\": \"high|medium|low\"}\n  ],\n  \"people_organizations\": [\n    {\"name\": \"entity\", \"role\": \"their role\", \"relevance\": \"why important\"}\n  ],\n  \"risks\": [\n    {\"risk\": \"description\", \"severity\": \"high|medium|low\", \"likelihood\": \"high|medium|low\"}\n  ],\n  \"opportunities\": [\n    {\"opportunity\": \"description\", \"potential\": \"high|medium|low\"}\n  ],\n  \"action_items\": [\n    {\"action\": \"what needs to be done\", \"owner\": \"who\", \"deadline\": \"when\"}\n  ],\n  \"questions_for_review\": [\n    \"Critical question that needs clarification\"\n  ]\n}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/prompt.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/formdata-node","vendor-chunks/webidl-conversions","vendor-chunks/openai","vendor-chunks/@anthropic-ai","vendor-chunks/form-data-encoder","vendor-chunks/agentkeepalive","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/ms","vendor-chunks/humanize-ms","vendor-chunks/event-target-shim","vendor-chunks/abort-controller"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fask%2Froute&page=%2Fapi%2Fask%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fask%2Froute.ts&appDir=%2FUsers%2Falex%2FWebstormProjects%2Fpersonal-rag-agent%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Falex%2FWebstormProjects%2Fpersonal-rag-agent&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();