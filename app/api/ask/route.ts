import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";
import OpenAI from "openai";
import { chatWithProvider } from "../../../lib/modelProvider";
import {
  SYSTEM_RAG,
  buildUserPrompt,
  analyzeClarificationNeed,
  mergeQuestionWithClarifications,
  ClarificationQuestion
} from "../../../lib/prompt";
import {
  PerplexityClient,
  shouldSearchWeb,
  enrichWithWebSearch
} from "../../../lib/perplexity";

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

function approxTokenLen(s: string) {
  return Math.ceil(s.length / 4);
}

function dedupeAndMerge(matches: any[]) {
  const seen = new Set<string>();
  const unique = [];
  for (const m of matches) {
    const key = `${m.document_id}:${m.chunk_text.slice(0, 100)}`;
    if (!seen.has(key)) {
      seen.add(key);
      unique.push(m);
    }
  }
  return unique;
}

function cleanAndParseJSON(raw: string): any {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
    return JSON.parse(raw);
  } catch (e) {
    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - —á–∏—Å—Ç–∏–º
    let cleaned = raw
        .replace(/```json\s*/gi, '')
        .replace(/```\s*/gi, '')
        .trim();

    // –ò—â–µ–º –ø–µ—Ä–≤—ã–π { –∏–ª–∏ [
    const jsonStart = cleaned.search(/[\{\[]/);
    if (jsonStart > 0) {
      cleaned = cleaned.substring(jsonStart);
    }

    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π } –∏–ª–∏ ]
    let lastBrace = cleaned.lastIndexOf('}');
    let lastBracket = cleaned.lastIndexOf(']');
    let jsonEnd = Math.max(lastBrace, lastBracket);

    if (jsonEnd > 0) {
      cleaned = cleaned.substring(0, jsonEnd + 1);
    }

    try {
      return JSON.parse(cleaned);
    } catch (e2) {
      console.error('Failed to parse even after cleaning:', e2);
      console.log('Cleaned string was:', cleaned.substring(0, 500));

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
      const answerMatch = cleaned.match(/"answer"\s*:\s*"([^"]+)"/);
      if (answerMatch) {
        return {
          answer: answerMatch[1].replace(/\\n/g, '\n'),
          citations: [],
          insights: [],
          follow_up_questions: []
        };
      }

      return null;
    }
  }
}

export async function POST(request: NextRequest) {
  const t0 = Date.now();

  try {
    const supabase = createClient(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.SUPABASE_SERVICE_ROLE_KEY!
    );

    const token = request.headers.get("authorization")?.replace("Bearer ", "");
    if (!token) return NextResponse.json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" }, { status: 401 });

    const { data: { user }, error: authError } = await supabase.auth.getUser(token);
    if (authError || !user) return NextResponse.json({ error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" }, { status: 401 });

    const body = await request.json();
    const {
      question,
      provider,
      projectId,
      role,
      // –ù–û–í–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      clarificationAnswers,  // –û—Ç–≤–µ—Ç—ã –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è
      skipClarification,     // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏—è
      searchMode,            // web/academic/sec
      domainFilter,          // –§–∏–ª—å—Ç—Ä –¥–æ–º–µ–Ω–æ–≤
    } = body;
    let webSearchEnabled = body.webSearchEnabled;
    let forceWebSearch = body.forceWebSearch;
    if (!question?.trim()) {
      return NextResponse.json({ error: "–í–æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" }, { status: 400 });
    }

    console.log(`–í–æ–ø—Ä–æ—Å: "${question}" | –ü—Ä–æ–µ–∫—Ç: ${projectId} | –†–æ–ª—å: ${role}`);
    console.log(`Web Search: enabled=${webSearchEnabled}, forced=${forceWebSearch}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤
    let countQuery = supabase
        .from("doc_chunks")
        .select("*", { count: "exact", head: true })
        .eq("user_id", user.id);

    if (projectId && projectId !== 'null') {
      countQuery = countQuery.eq("project_id", projectId);
    }

    const { count } = await countQuery;

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏ (–¥–∞–∂–µ –µ—Å–ª–∏ –∏—Ö 0, –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
    let chunks: any[] = [];
    let webContext: any = null;

    if (count && count > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${count} —á–∞–Ω–∫–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ`);

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
      console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞...');
      const embedRes = await openai.embeddings.create({
        model: "text-embedding-3-small",
        input: question
      });
      const queryEmbedding = embedRes.data[0].embedding;

      // –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
      console.log('–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤...');
      const { data: matches, error: matchError } = await supabase.rpc("match_doc_chunks", {
        query_embedding: queryEmbedding,
        match_threshold: 0.25,
        match_count: 15,
        filter_user_id: user.id,
        filter_project_id: projectId && projectId !== 'null' ? projectId : null
      });

      if (!matchError && matches?.length) {
        const uniq = dedupeAndMerge(matches).slice(0, 10);
        chunks = uniq.map((m: any) => ({
          doc_id: m.document_id,
          chunk_index: m.chunk_index ?? 0,
          similarity: m.similarity ?? 0,
          text: (m.chunk_text || "").slice(0, 2000)
        }));
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${chunks.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤`);
      }
    }

    // ================== CLARIFICATION MODE ==================
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤)
    if (!skipClarification && !clarificationAnswers) {
      const clarificationCheck = analyzeClarificationNeed(
          question,
          chunks,
          role
      );

      if (clarificationCheck.needed) {
        console.log('–¢—Ä–µ–±—É—é—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏—è:', clarificationCheck.questions);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ web search –∫–∞–∫ –æ–¥–Ω–æ –∏–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π
        if (!webSearchEnabled && chunks.length === 0) {
          clarificationCheck.questions?.push({
            id: 'enable_web_search',
            question: '–í –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ò—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ?',
            type: 'boolean',
            required: false,
            context: '–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
          });
        }

        return NextResponse.json({
          mode: 'needs_clarification',
          clarifications: clarificationCheck.questions,
          partialInsight: clarificationCheck.preliminaryInsight,
          originalQuestion: question,
          documentsFound: chunks.length
        });
      }
    }

    // –û–±–æ–≥–∞—â–∞–µ–º –≤–æ–ø—Ä–æ—Å —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    let finalQuestion = question;
    if (clarificationAnswers) {
      finalQuestion = mergeQuestionWithClarifications(question, clarificationAnswers);
      console.log('–û–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å:', finalQuestion);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∫–ª—é—á–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å web search —á–µ—Ä–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏—è
      if (clarificationAnswers.search_web === true || clarificationAnswers.enable_web_search === true) {
        webSearchEnabled = true;
        forceWebSearch = true;
        console.log('Web search –≤–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏—è');
      }
    }

    // ================== SMART WEB SEARCH ==================
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ web search
    const needsWeb = webSearchEnabled && (
        forceWebSearch ||
        shouldSearchWeb(finalQuestion, chunks, false) ||
        chunks.length === 0
    );

    if (needsWeb) {
      console.log('üåê –í—ã–ø–æ–ª–Ω—è–µ–º web search...');

      try {
        // –ü–∞—Ä—Å–∏–º domain filter
        const domainFilterArray = domainFilter
          ? domainFilter.split(',').map((d: string) => d.trim()).filter(Boolean)
          : undefined;

        const webEnrichment = await enrichWithWebSearch(
            finalQuestion,
            chunks,
            {
              searchRecencyFilter: detectTimeFilter(finalQuestion),
              searchMode: searchMode || 'web',
              searchDomainFilter: domainFilterArray,
              role: role,
              returnImages: true,
              returnRelated: true
            }
        );

        webContext = webEnrichment;
        console.log('‚úÖ Web search –∑–∞–≤–µ—Ä—à–µ–Ω');
        console.log(`   - –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${webEnrichment.webSources?.length || 0}`);
        console.log(`   - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${webEnrichment.webImages?.length || 0}`);
        console.log(`   - –°–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${webEnrichment.relatedQuestions?.length || 0}`);
        console.log(`   - –ú–æ–¥–µ–ª—å: ${webEnrichment.model}`);
      } catch (webError) {
        console.error('‚ö†Ô∏è Web search failed:', webError);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ web context
      }
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –Ω–∏ web —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (!chunks.length && !webContext) {
      return NextResponse.json({
        answer: "–ù–µ –Ω–∞—à—ë–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞, –Ω–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.",
        question,
        sources: [],
        webSources: [],
        insights: [],
        follow_up_questions: ["–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ?", "–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫?"]
      });
    }

    // ================== –ü–û–î–ì–û–¢–û–í–ö–ê –ü–†–û–ú–ü–¢–ê ==================
    const ctxTokens = approxTokenLen(chunks.map(c => c.text).join(" "));
    const providerFinal = (provider as "openai" | "anthropic") ??
        (ctxTokens > 120_000 ? "anthropic" : "openai");

    console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${providerFinal}, –∫–æ–Ω—Ç–µ–∫—Å—Ç: ${ctxTokens} —Ç–æ–∫–µ–Ω–æ–≤`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —Ä–æ–ª—å—é
    let systemPrompt = SYSTEM_RAG;
    if (role && role !== 'analyst') {
      const rolePrefix = role === 'custom' ? role : `ROLE: ${role}\n\n`;
      systemPrompt = `${rolePrefix}${SYSTEM_RAG}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è web context
    if (webContext) {
      systemPrompt += `\n\nWEB SEARCH INTEGRATION:
- You have access to both document context and real-time web search results
- Clearly distinguish between information from documents vs web
- Prioritize recent web data for current events and market information
- Cross-validate facts between sources when possible`;
    }

    // –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    const userPrompt = buildEnhancedUserPrompt(
        finalQuestion,
        chunks,
        webContext,
        clarificationAnswers
    );

    console.log('–ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏...');
    const raw = await chatWithProvider(providerFinal, {
      system: systemPrompt,
      user: userPrompt,
      maxTokens: 8000
    });

    console.log(`Raw –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):`, raw.substring(0, 200));

    // –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
    let parsed = cleanAndParseJSON(raw);

    if (!parsed) {
      console.log('JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º raw —Ç–µ–∫—Å—Ç');
      parsed = {
        answer: raw,
        citations: [],
        insights: [],
        follow_up_questions: []
      };
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const answer = parsed.answer || "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç";
    const citations = parsed.citations || chunks.slice(0, 3).map(c => ({
      doc_id: c.doc_id,
      chunk_index: c.chunk_index,
      similarity: c.similarity,
      quote: c.text.slice(0, 200)
    }));

    // –î–æ–±–∞–≤–ª—è–µ–º web –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    const webSources = webContext?.webSources || [];
    const webImages = webContext?.webImages || [];
    const relatedQuestions = webContext?.relatedQuestions || [];

    const insights = parsed.insights || [];

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º follow_up –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –º–æ–¥–µ–ª–∏ –∏ –∏–∑ Perplexity
    let follow_up_questions = parsed.follow_up_questions || [];
    if (relatedQuestions.length > 0) {
      follow_up_questions = [...follow_up_questions, ...relatedQuestions].slice(0, 5);
    }

    console.log(`–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. Answer: ${answer.length} chars, Web sources: ${webSources.length}, Images: ${webImages.length}`);

    const latency = Date.now() - t0;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    await supabase.from("messages").insert([
      {
        user_id: user.id,
        role: "user",
        content: question,
        project_id: projectId && projectId !== 'null' ? projectId : null
      },
      {
        user_id: user.id,
        role: "assistant",
        content: answer,
        project_id: projectId && projectId !== 'null' ? projectId : null,
        metadata: {
          provider: providerFinal,
          latency_ms: latency,
          sources: citations,
          webSources,
          webImages,  // –ù–û–í–û–ï
          insights,
          follow_up_questions,
          usedWebSearch: !!webContext,
          perplexityModel: webContext?.model,  // –ù–û–í–û–ï
          hadClarifications: !!clarificationAnswers
        }
      }
    ]);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    return NextResponse.json({
      answer,
      question,
      sources: citations,
      webSources,
      webImages,  // –ù–û–í–û–ï: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ web
      insights,
      follow_up_questions,
      provider: providerFinal,
      perplexityModel: webContext?.model,  // –ù–û–í–û–ï: –º–æ–¥–µ–ª—å Perplexity
      latency_ms: latency,
      usedWebSearch: !!webContext
    });

  } catch (err: any) {
    console.error('Error in /api/ask:', err);
    return NextResponse.json({
      error: err?.message || "Unknown error",
      answer: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
      sources: [],
      webSources: [],
      webImages: [],
      insights: [],
      follow_up_questions: []
    }, { status: 500 });
  }
}

// ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è web search
function detectTimeFilter(question: string): 'day' | 'week' | 'month' | 'year' | undefined {
  const lowerQ = question.toLowerCase();

  if (lowerQ.includes('—Å–µ–≥–æ–¥–Ω—è') || lowerQ.includes('today')) return 'day';
  if (lowerQ.includes('–Ω–µ–¥–µ–ª–µ') || lowerQ.includes('week')) return 'week';
  if (lowerQ.includes('–º–µ—Å—è—Ü') || lowerQ.includes('month')) return 'month';
  if (lowerQ.includes('–≥–æ–¥') || lowerQ.includes('year')) return 'year';

  return undefined;
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ —Å web context
function buildEnhancedUserPrompt(
    question: string,
    documentChunks: any[],
    webContext: any,
    clarificationAnswers?: any
): string {
  let prompt = '';

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  if (documentChunks.length > 0) {
    prompt += 'DOCUMENT CONTEXT:\n';
    prompt += documentChunks.map((c, i) =>
        `[Doc ${i+1}] (Similarity: ${(c.similarity * 100).toFixed(1)}%)\n${c.text}\n`
    ).join('\n---\n');
  }

  // –î–æ–±–∞–≤–ª—è–µ–º web –∫–æ–Ω—Ç–µ–∫—Å—Ç
  if (webContext) {
    prompt += '\n\nWEB SEARCH RESULTS (Real-time):\n';
    prompt += webContext.webAnswer || '';

    if (webContext.webSources?.length > 0) {
      prompt += '\n\nWeb Sources:\n';
      prompt += webContext.webSources.map((s: any) => `- ${s.title || s.url}`).join('\n');
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏—è
  if (clarificationAnswers) {
    prompt += '\n\nUSER CLARIFICATIONS:\n';
    prompt += Object.entries(clarificationAnswers)
        .map(([key, value]) => `${key}: ${value}`)
        .join('\n');
  }

  prompt += `\n\nUSER QUESTION:\n${question}\n\n`;
  prompt += 'Provide a comprehensive answer using both document and web context where available. ';
  prompt += 'Clearly indicate which information comes from documents vs web sources.';

  return prompt;
}